<?xml version="1.0" encoding="UTF-8"?>
<!-- 注解配置方式  -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.1.xsd  
    http://www.springframework.org/schema/mvc    
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	
	<!-- 默认扫描的包路径，使用注解的 Controller 类将被自动发现并注册为 Bean -->  
    <context:component-scan base-package="controller.annotation" />
    <context:component-scan base-package="service" />

    <!--
    静态资源的请求也需要通过 DispatcherServlet，但没必要专门写一个 controller，可以使用 <mvc:resources> 元素。

    <mvc:resources> 建立了一个服务于静态资源的处理器。
    属性 mapping 被设置为 /resources/**，它包含的 ** 通配符表明路径必须以 /resources 开始，而且也包含它的任意子路径。
    属性 location 表明了要提供服务的文件位置。
    -->
    <mvc:resources mapping="/resources/**" location="/resources/" />
	<!--
	上述配置表明，所有以 /resources 路径开头的请求都会自动由应用程序根目录下的 /resources 目录提供服务。
    因此，所有图片、样式表、JavaScript以及其他的静态资源都必须放在应用程序的 /resources 目录下，如下：
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/img/**" location="/img/"/>
	-->
    <mvc:resources mapping="/js/**" location="/js/"/>

    <!--
    DispatcherServlet 需要咨询一个或多个处理器映射（Handler mapping）来明确地将请求分发给哪个控制器。
    Spring 自带了多个处理器映射实现供选择使用：

    BeanNameUrlHandlerMapping：根据控制器 Bean 的名字将控制器映射到 URL。
    ControllerClassNameHandlerMapping：通过使用控制器的类名作为 URL 基础将控制器映射到 URL。
    DefaultAnnotationHandlerMapping：将请求映射给使用 @RequestMapping 注解的控制器和控制器方法。
    SimpleUrlHandlerMapping：使用定义在 Spring 应用上下文的属性集合将控制器映射到 URL。

    如果没有找到处理器映射 Bean，DispatcherServlet 将创建并使用 BeanNameUrlHandlerMapping 和 DefaultAnnotationHandlerMapping。

    只需要添加下面一行配置就能使用 SpringMVC 提供的注解驱动特性。
    -->
    <mvc:annotation-driven />

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="interceptor.BaseUrlInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!--
	为了确定指定的请求需要使用哪个视图（JSP、Velocity或FreeMarker），DispatcherServlet 会查找一个
	视图解析器（ViewResolver）来将控制器返回的逻辑视图名称转换成渲染结果的实际视图。
	视图解析器的工作是将逻辑视图的名字与 org.springframework.web.servlet.View 的实现相匹配。

    Spring 自带了多个视图解析器实现供选择使用：

    BeanNameViewResolver：查找 Bean id 与逻辑视图名称相同 View 的实现。
	FreeMarkerViewResolver：查找基于 FreeMarker 的模板，它的路径根据加完前缀和后缀的逻辑视图名称来确定。
	VelocityViewResolver：查找基于 Velocity 的模板，它的路径根据加完前缀和后缀的逻辑视图名称来确定。
	InternalResourceViewResolver：用于支持 Servlet、JSP 视图解析，它的路径根据加完前缀和后缀的逻辑视图名称来确定。
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- viewClass：JstlView 表示 JSP 模板页面需要使用 JSTL 标签库，classpath 中必须包含 jstl 的相关 jar 包。 -->
   		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    	<!-- 
    	prefix和suffix：查找视图页面的前缀和后缀（完整路径：前缀[逻辑视图名]后缀）。
    	比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在"WEB-INF/views/jsp/hello.jsp"。
    	-->
    	<property name="prefix" value="/WEB-INF/views/"/>
    	<property name="suffix" value=".jsp"/>
	</bean>

    <!--
    声明一个 id 为 multipartResolver 的 Bean，实现类是 CommonsMultipartResolver。
    当 DispatcherServlet 查找 multipart 解析器的时候，会查找 id 为 multipartResolver 的 Bean。
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="500000"/>
    </bean>
</beans>